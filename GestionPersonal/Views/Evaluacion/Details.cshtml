@model GPSInformation.Models.Evaluacion

@{
    ViewData["Title"] = "Dashboard de evaluacion";
    List<GPSInformation.Models.EvaluacioSeccion> secciones = ViewBag.Preguntas;
    List<GPSInformation.Models.EvaluacionEmpleado> view_Empleados = (List<GPSInformation.Models.EvaluacionEmpleado>)ViewBag.Participantes;
    List<GPSInformation.Models.EvaluacionRespuestas> respuestas = (List<GPSInformation.Models.EvaluacionRespuestas>)ViewBag.Respuestas;
    int Preguntas = 1;
    List<string> Indices;
    List<string> Valores;
    List<string> Limites;


    int Respondidas = view_Empleados.Count(a => a.Respondio);




}
@section MenuTop{
    <div class="d-sm-flex align-items-center justify-content-between mg-b-20 mg-lg-b-25 mg-xl-b-30">
        <div>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb breadcrumb-style1 mg-b-10">
                    <li class="breadcrumb-item" aria-current="page"><a href="@Url.Action("Index","Evaluacion")">Lista de evaluaciones</a> </li>
                    <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
                </ol>
            </nav>
            <h4 class="mg-b-0 tx-spacing--1">@ViewData["Title"]</h4>
        </div>
        <div class="d-none d-md-block">
            @*<a href="#EmpleadosNoagregados" class="btn btn-sm pd-x-15 btn-white btn-uppercaser" title="clic para ver empleados no agregados a esta evaluación" data-toggle="modal" onclick="app_det_eval.EmpleadosNoagregados()"><i data-feather="list" class="wd-10 mg-r-5"></i>Empleados sin participar</a>*@
        </div>
    </div>
}
<button id="bt_refress" onclick="location.reload();" style="display:none"></button>
<div id="app_det_eval">
    <div class="d-sm-flex align-items-center justify-content-between">
        <div>
            <h2 class="mg-b-5">@Html.DisplayFor(model => model.Nombre)</h2>
            <small class="tx-uppercase">
                @if (Model.IsInterno)
                {
                    @Html.DisplayFor(model => model.PonenteNameExt)
                }
                else
                {
                    @Html.DisplayFor(model => model.PersonaName)
                }
            </small>
            <p class="mg-b-0 tx-color-03">@Html.DisplayFor(model => model.InicioHora)<span>-</span>@Html.DisplayFor(model => model.FinHora)</p>
            <p class="mg-b-0 tx-color-03">@Html.DisplayNameFor(model => model.ModalidadName) :  @Html.DisplayFor(model => model.ModalidadName)</p>
            <p class="mg-b-0 tx-color-03">@Html.DisplayNameFor(model => model.Duracion) :  @Html.DisplayFor(model => model.Duracion) Hrs</p>
            <p class="mg-b-0 tx-color-03">
                @if (Model.IsInterno)
                {
                    <span class="badge badge-success">Ponente(s) Externo(s)</span>
                }
                else
                {
                    <span class="badge badge-primary">Ponente(s) Interno(s)</span>
                }
            </p>
        </div>
        <div class="mg-t-20 mg-sm-t-0">
            @*<button class="btn btn-white"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-printer mg-r-5"><polyline points="6 9 6 2 18 2 18 9"></polyline><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><rect x="6" y="14" width="12" height="8"></rect></svg> Print</button>*@
            @*<button class="btn btn-primary mg-l-5"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-credit-card mg-r-5"><rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect><line x1="1" y1="10" x2="23" y2="10"></line></svg> Pay</button>*@
        </div>
    </div>
    <hr />
    <div class="card mg-b-10">
        <div class="card-header pd-t-20 d-sm-flex align-items-start justify-content-between bd-b-0 pd-b-0">

        </div><!-- card-header -->
        <div class="card-body pd-y-30">
            <div class="d-sm-flex">
                <div class="media col-lg-3">
                    <div class="wd-40 wd-md-50 ht-40 ht-md-50 bg-teal tx-white mg-r-10 mg-md-r-10 d-flex align-items-center justify-content-center rounded op-6">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bar-chart-2"><line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line></svg>
                    </div>
                    <div class="media-body">
                        <h6 class="tx-sans tx-uppercase tx-10 tx-spacing-1 tx-color-03 tx-semibold tx-nowrap mg-b-5 mg-md-b-8">Evaluaciones Contestadas</h6>
                        <h4 class="tx-20 tx-sm-18 tx-md-24 tx-normal tx-rubik mg-b-0" style="margin-top: auto;">
                            @Respondidas
                        </h4>
                    </div>
                </div>
                <div class="media mg-t-20 mg-sm-t-0 mg-sm-l-15 mg-md-l-40 col-lg-3">
                    <div class="wd-40 wd-md-50 ht-40 ht-md-50 bg-pink tx-white mg-r-10 mg-md-r-10 d-flex align-items-center justify-content-center rounded op-5">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bar-chart-2"><line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line></svg>
                    </div>
                    <div class="media-body">
                        <h6 class="tx-sans tx-uppercase tx-10 tx-spacing-1 tx-color-03 tx-semibold mg-b-5 mg-md-b-8">Evaluaciones sin Contestar</h6>
                        <h4 class="tx-20 tx-sm-18 tx-md-24 tx-normal tx-rubik mg-b-0" style="margin-top: auto;">
                            @view_Empleados.Count(a => a.Respondio == false)
                        </h4>
                    </div>
                </div>
            </div>
        </div><!-- card-body -->
    </div>
    <div data-label="Preguntas dashboard" class="df-example demo-forms" id="app_createPermiso">
        @foreach (var seccion in secciones)
        {
            <div class="card mg-b-20 mg-lg-b-25">
                <div class="card-header pd-y-15 pd-x-20 d-flex align-items-center justify-content-between">
                    <h6 class="tx-uppercase tx-semibold mg-b-0">@seccion.Nombre</h6>
                </div><!-- card-header -->
                <div class="card-body pd-25 row">
                    
                    <div class="col-sm-12 row align-items-center">
                        @foreach (var pregunta in seccion.Preguntas)
                        {

                            @if (pregunta.Tipo == 1)
                            {
                                <div class="col-8">
                                    <div class="d-flex" style="">
                                        <div class="pd-10  flex-grow-1">
                                            @Preguntas .- <span>@Html.Raw(pregunta.Pregunta)</span>
                                        </div>
                                        <div class="pd-10 ">
                                            @{
                                                double Calificacion = 0;
                                                int countas = 0;
                                            }
                                            @foreach (var item in respuestas.Where(a => a.IdEvaluacionSeccionPregnts == pregunta.IdEvaluacionSeccionPregnts).ToList())
                                            {
                                                if (item.Respuesta == "1")
                                                {
                                                    Calificacion = Calificacion + 10;
                                                    countas++;
                                                }
                                                else if (item.Respuesta == "2")
                                                {
                                                    Calificacion = Calificacion + 7.5f;
                                                    countas++;
                                                }
                                                else if (item.Respuesta == "3")
                                                {
                                                    Calificacion = Calificacion + 5;
                                                    countas++;
                                                }
                                                else if (item.Respuesta == "4")
                                                {
                                                    Calificacion = Calificacion + 2.5f;
                                                    countas++;
                                                }
                                                else if (item.Respuesta == "5")
                                                {

                                                }
                                            }
                                            @{
                                                double total = 0;
                                                if (countas > 0)
                                                {
                                                    total = Calificacion / countas;
                                                }


                                            }
                                            <strong>@total.ToString("0.00")</strong>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="d-flex bd-highlight">
                                        <div class="p-1">1</div>
                                        <div class="p-1 w-100">
                                            <div class="progress ht-20">
                                                <div class="progress-bar " style="width: @Html.Raw($"{(int)Math.Round(total*10)}%")" role="progressbar" aria-valuenow="@Html.Raw((int)Math.Round(total*10))" aria-valuemin="0" aria-valuemax="100">@total.ToString("0.00")</div>
                                            </div>
                                        </div>
                                        <div class="p-1">10</div>
                                    </div>
                                    

                                </div>
                            }
                            else
                            {
                                <div class="col-8">
                                    <div class="d-flex  bg-light" style="" >
                                        <div class="pd-10  flex-grow-1">
                                            <p>@Preguntas .- <span>@Html.Raw(pregunta.Pregunta)</span></p>
                                            <ul>
                                                @foreach (var a in respuestas.Where(a => a.IdEvaluacionSeccionPregnts == pregunta.IdEvaluacionSeccionPregnts && a.Respuesta != "").ToList())
                                                {
                                                    <li>
                                                        <span title="Comentario por : @view_Empleados.Find( ass => ass.IdPersona == a.IdPersona).EmpleadoDatos.NombreCompleto">@Html.Raw(string.IsNullOrEmpty(a.Respuesta) ? "Sin respuesta" : a.Respuesta)</span>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                        <div class="pd-10 ">

                                        </div>
                                    </div>
                                </div>
                                <div class="col-4"></div>
                            }
                            Preguntas++;
                        }
                    </div>
                </div>
            </div>

        }
    </div>

    <div data-label="Participantes" class="df-example demo-forms mt-3" id="participantes">
        <div class="d-flex align-items-center justify-content-between mg-b-30 ">
            <h2 class="tx-15 mg-b-0">Lista de participantes</h2>
            <div class="btn-group text-right" role="group" aria-label="Basic example">
                <a href="#modalActividadVacacionesPeriodos" onclick="document.getElementById('inpt_newPart').focus()" data-toggle="modal" class="btn btn-sm btn-white d-flex align-items-center"><i class="icon ion-md-time mg-r-5 tx-16 lh--9"></i>Agregar nuevos participantes</a>
                <a href="#modal_addDepartamentos" data-toggle="modal" class="btn btn-sm btn-white d-flex align-items-center"><i class="icon ion-md-time mg-r-5 tx-16 lh--9"></i>Agregar por departamentos</a>
            </div>
        </div>
        <hr />
        <table class="table table-bordered hable-hover" id="table_del_part">
            <thead>
                <tr>
                    <th>Nomina</th>
                    <th>Empleado</th>
                    <th>Puesto</th>
                    <th>Departamento</th>
                    <th>Correo</th>
                    <th>Contestó</th>
                    <th align="center">
                        <div class="dropdown">
                            <button v-bind:class="(Eliminados.length > 0 ? 'btn-outline-danger' : 'btn-outline-success') + ' btn btn-sm dropdown-toggle'" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i data-feather="more-vertical"></i> - {{ Eliminados.length }}
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a v-bind:class="(Eliminados.length > 0 ? '' : 'disabled') + ' dropdown-item'" href="#participantes" id="btn_det_del" v-on:click="Eliminar" title="Quitar seleccionados">Eliminar seleccionados</a>
                                <a v-bind:class="(Eliminados.length > 0 ? '' : 'disabled') + ' dropdown-item'" href="#participantesResend" id="btn_det_del" v-on:click="ReEnviar" title="Reenviar correo a participantes seleccionados">eenviar correo</a>
                                <a v-bind:class="(Eliminados.length > 0 ? '' : 'disabled') + ' dropdown-item'" href="#participantesResend" id="btn_det_del" v-on:click="Reactivar" title="Reactivar evaluación a participantes seleccionados">Reactivar evaluación</a>
                                <a class="dropdown-item" href="#participantes" id="btn_det_del" v-on:click="MarcarTodos" title="Marcar todos">Marcar todos</a>
                                <a class="dropdown-item" href="#participantes" title="Cancelar" v-on:click="Cancelar()">Cancelar</a>
                            </div>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var emp in view_Empleados)
                {
                    if (emp != null && emp.EmpleadoDatos != null)
                    {
                        <tr id="row_emp_@emp.IdPersona">
                            <td class="">@emp.EmpleadoDatos.NumeroNomina</td>
                            <td class="">@emp.EmpleadoDatos.NombreCompleto2</td>
                            <td>@emp.EmpleadoDatos.PuestoNombre</td>
                            <td>@emp.EmpleadoDatos.NombreDepartamento</td>
                            <td>@emp.EmpleadoDatos.Correo</td>
                            <td>
                                @if (@emp.Respondio)
                                {
                                    <span class="badge badge-success">Contestada</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger">Sin responder</span>
                                }
                            </td>
                            <td align="center">
                                @*@Html.ActionLink("Quitar", "DeleteParticipante", "Evaluacion", new { IdEvaluacion = Model.IdEvaluacion, IdPersona = emp.IdPersona })*@
                                <input type="checkbox" v-on:click="Marcar('chec_det_del_@emp.IdPersona')" name="chec_det_del_@emp.IdPersona" id="chec_det_del_@emp.IdPersona" value="@emp.IdPersona" class="Eve_remove" title="Marcar a @emp.EmpleadoDatos.NombreCompleto" />
                            </td>
                        </tr>
                    }

                }
            </tbody>
        </table>
    </div>
    <div class="modal calendar-modal-create fade effect-scale" id="modalActividadVacacionesPeriodos" role="dialog" data-backdrop="false" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body pd-20 pd-sm-30">

                    <h5 class="tx-18 tx-sm-20 mg-b-20 mg-sm-b-30">Agregar nuevos participantes</h5>

                    <div id="content_vacacionesAcitivit">
                        <form asp-action="AddParticipantes">
                            <div class="form-group">
                                <label>selecciona uno o mas participantes</label>
                                <input type="hidden" name="IdEvaluacion" value="@Model.IdEvaluacion" />
                                <select name="Participantes" id="inpt_newPart" multiple="multiple" asp-items="ViewBag.Empleados" class="form-control select2" required>
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                            <div class="form-group row mg-b-0">
                                <div class="col-sm-12 text-right">
                                    <a data-dismiss="modal" class="btn btn-sm btn-secondary">Cancelar</a>
                                    <button type="submit" class="btn btn-sm btn-primary">Agregar</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div><!-- modal-body -->
            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
    <div class="modal calendar-modal-create fade effect-scale" id="modal_addDepartamentos" role="dialog" data-backdrop="false" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body pd-20 pd-sm-30">

                    <h5 class="tx-18 tx-sm-20 mg-b-20 mg-sm-b-30">Agregar por departamentos</h5>

                    <div id="content_vacacionesAcitivit">
                        <form asp-action="AddDepartamentos">
                            <div class="form-group">
                                <label>selecciona uno o mas departamentos</label>
                                <input type="hidden" name="IdEvaluacion" value="@Model.IdEvaluacion" />
                                <select name="Departamentos" id="sleectDepartamtnso" multiple="multiple" asp-items="ViewBag.Departamentos" class="form-control select2" required>
                                    <option value="0">Selecciona una opción</option>
                                </select>
                            </div>
                            <div class="form-group row mg-b-0">
                                <div class="col-sm-12 text-right">
                                    <a data-dismiss="modal" class="btn btn-sm btn-secondary">Cancelar</a>
                                    <button type="submit" class="btn btn-sm btn-primary">Agregar</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div><!-- modal-body -->
            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->

    <div class="modal fade" id="EmpleadosNoagregados" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-body pd-20 pd-sm-30">
                    <h4 class="tx-18 tx-sm-20 mg-b-3">Empleados</h4>
                    <p class="mg-b-20 tx-color-03">Listado de coraboradores sin participar en esta evaluación</p>
                    <a href="" role="button" class="close pos-absolute t-15 r-15" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </a>

                    <div class="bd" id="EmpleadosNoagregados_result">

                    </div>

                    <div class="d-flex justify-content-end mg-t-30">
                        <button type="button" class="btn btn-white" data-dismiss="modal">Cerrar</button>
                    </div>
                </div><!-- modal-body -->
            </div><!-- modal-content -->
        </div><!-- modal-dialog -->
    </div><!-- modal -->
    <div>
        <a class="btn btn-danger" asp-action="Index">Regresar</a>
    </div>
</div>

@section Scripts {

    <script>
        var app_det_eval = new Vue({
            el: "#app_det_eval",
            data: {
                Eliminados: []
            },
            mounted() {
                $('#table_del_part').DataTable({
                    language: {
                        searchPlaceholder: 'Search...',
                        sSearch: '',
                        lengthMenu: '_MENU_ items/page',
                    },
                    ordering: false,
                    dom: 'Bfrtip',
                    buttons: [
                        'excel', 'pdf'
                    ]
                });
                
            },
            methods: {
                EmpleadosNoagregados: async function () {
                    var formData = new FormData();
                    formData.append('id', '@Model.IdEvaluacion');
                        document.getElementById("EmpleadosNoagregados_result").innerHTML = '<div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>'
                    await axios.post('@Url.Action("EmpleFaltantes", "Evaluacion")', formData, null).then(response => {
                        document.getElementById("EmpleadosNoagregados_result").innerHTML = response.data
                        $('#EmpleaEvFaltantes').DataTable({
                            language: {
                                searchPlaceholder: 'Search...',
                                sSearch: '',
                                lengthMenu: '_MENU_ items/page',
                            },
                            ordering: true,
                            dom: 'Bfrtip',
                            buttons: [
                                 'excel', 'pdf'
                            ]
                        });
                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {
                        //this.Registrando = false
                    })
                },
                span(text) {
                    return `<span> ${text} </span>`
                },
                MarcarTodos: async function () {
                    var Eve_removes = document.getElementsByClassName("Eve_remove");
                    for (i = 0; i < Eve_removes.length; i++) {
                        Eve_removes[i].checked = true;
                        this.Marcar("chec_det_del_" + Eve_removes[i].value);
                    }
                },
                Eliminar: async function () {
                    let request = {
                        IdEvaluacion : @Model.IdEvaluacion,
                        Empleados : this.Eliminados
                    }

                    Swal.fire({
                        title: "¿Deseas remover " + (this.Eliminados.length) +" participantes?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then(async(result) => {
                        if (result.value) {
                            await axios.post('@Url.Action("DeleteParticipantes", "Evaluacion")', request, null).then(response => {
                                document.getElementById("bt_refress").click();
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {

                                    }
                                }
                                ShowMessageErrorShort("error al extraer información", "error")
                            }).finally()
                        }
                    })
                },
                ReEnviar: async function () {
                    let request = {
                        IdEvaluacion : @Model.IdEvaluacion,
                        Empleados : this.Eliminados
                    }

                    Swal.fire({
                        title: "¿Deseas reenviar notificación a " + (this.Eliminados.length) +" participante(s)?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then(async(result) => {
                        if (result.value) {
                            await axios.post('@Url.Action("ResendEmail", "Evaluacion")', request, null).then(response => {
                                document.getElementById("bt_refress").click();
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {

                                    }
                                }
                                ShowMessageErrorShort("error al extraer información", "error")
                            }).finally()
                        }
                    })
                },
                Reactivar: async function () {
                    let request = {
                        IdEvaluacion : @Model.IdEvaluacion,
                        Empleados : this.Eliminados
                    }

                    Swal.fire({
                        title: "¿Deseas reactivar evaluación a " + (this.Eliminados.length) +" participante(s)?",
                        text: "",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si!'
                    }).then(async(result) => {
                        if (result.value) {
                            await axios.post('@Url.Action("Reactivar", "Evaluacion")', request, null).then(response => {
                                document.getElementById("bt_refress").click();
                            }).catch(error => {
                                if (error.response) {
                                    if (error.response.status === 400) {

                                    }
                                }
                                ShowMessageErrorShort("error al extraer información", "error")
                            }).finally()
                        }
                    })
                },
                Marcar: async function (idCheck) {
                    let chek = document.getElementById(idCheck)
                    if (chek.checked == true) {
                        if (this.Eliminados.length == 0) {
                            this.Eliminados.push(parseInt(chek.value))
                        } else {
                            let active = false;
                            await this.Eliminados.forEach((parti, index) => {
                                if (parseInt(parti) == parseInt(chek.value)) {
                                    active = false;
                                } else {
                                    active = true;
                                }
                            });
                            if (active == true) {
                                this.Eliminados.push(parseInt(chek.value))
                            }
                        }
                    } else {
                        await this.Eliminados.forEach((parti, index) => {
                            if (parseInt(parti) == parseInt(chek.value)) {
                                this.Eliminados.splice(index, 1);
                            }
                        });
                    }
                    console.log(this.Eliminados)
                },
                Cancelar: async function () {
                    await this.Eliminados.forEach((parti, index) => {
                        let chek = document.getElementById('chec_det_del_' + parti)
                        chek.checked = false
                    });
                    this.Eliminados = []
                }
            }
        });
    </script>

    @*@{
        Preguntas = 1;
        int Max = 0;
    }
    @foreach (var seccion in secciones)
    {
        Indices = new List<string>();
        Limites = new List<string>();
        Valores = new List<string>();
        @foreach (var pregunta in seccion.Preguntas)
        {
            if (pregunta.Tipo == 1)
            {
                double Calificacion = 0;
                int countas = 0;
                @foreach (var item in respuestas.Where(a => a.IdEvaluacionSeccionPregnts == pregunta.IdEvaluacionSeccionPregnts).ToList())
                {
                    if (item.Respuesta == "1")
                    {
                        Calificacion = Calificacion + 10;
                        countas++;
                    }
                    else if (item.Respuesta == "2")
                    {
                        Calificacion = Calificacion + 7.5f;
                        countas++;
                    }
                    else if (item.Respuesta == "3")
                    {
                        Calificacion = Calificacion + 5;
                        countas++;
                    }
                    else if (item.Respuesta == "4")
                    {
                        Calificacion = Calificacion + 2.5f;
                        countas++;
                    }
                    else if (item.Respuesta == "5")
                    {

                    }
                }
                    double total = Calificacion / countas;
                    Valores.Add(total.ToString("0.00"));
                    Indices.Add($"'Pregunta: #{Preguntas}'");

            }

            Preguntas++;
        }
        <script>

            var ctxLabel = [@Html.Raw(string.Join(",", Indices))];
            var ctxData1 = [@string.Join(",", Valores)];
    var ctx1 = document.getElementById('@Html.Raw(seccion.IdEvaluacioSeccion+"_Seccion")').getContext('2d');
    new Chart(ctx1, {
        type: 'horizontalBar',
        data: {
            labels: ctxLabel,
            datasets: [
                {
                    data: ctxData1,
                    backgroundColor: '#69b2f8'
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: false,
                labels: {
                    display: true
                }
            },
            scales: {
                yAxes: [{
                    stacked: true,
                    gridLines: {
                        display: true
                    },
                    ticks: {
                        display: true,
                        beginAtZero: true,
                        fontSize: 10,
                        fontColor: '#182b49',
                        mirror: true
                    }
                }],
                xAxes: [{
                    stacked: true,
                    gridLines: {
                        display: true,
                        color: '#eceef4'
                    },
                    barPercentage: 0.6,
                    ticks: {
                        beginAtZero: true,
                        fontSize: 10,
                        fontColor: '#8392a5',
                        max: 10
                    }
                }]
            }
        }
    });
        </script>
    }*@


}
