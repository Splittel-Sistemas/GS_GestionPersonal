<script src="~/template/lib/jquery/jquery.min.js"></script>
<script src="https://unpkg.com/@@popperjs/core@2"></script>
<script src="~/template/lib/jqueryui/jquery-ui.min.js"></script>
<script src="~/template/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/template/lib/feather-icons/feather.min.js"></script>
<script src="~/template/lib/perfect-scrollbar/perfect-scrollbar.min.js"></script>
<script src="~/template/lib/prismjs/prism.js"></script>
<script src="~/template/lib/spectrum-colorpicker/spectrum.js"></script>



<script src="~/template/lib/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="~/template/lib/datatables.net-dt/js/dataTables.dataTables.min.js"></script>
<script src="~/template/lib/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/template/lib/datatables.net-responsive-dt/js/responsive.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.0/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.print.min.js"></script>


<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.1/axios.js"></script>
<script src="https://unpkg.com/vue-router@2.0.0/dist/vue-router.js"></script>
<script src="https://unpkg.com/element-ui/lib/index.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="~/template/lib/select2/js/select2.min.js"></script>
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.4.0/bootbox.min.js"></script>*@
@*<script src="https://bootboxjs.com/v3.x/bootbox.js"></script>*@

<script src="~/template/lib/jquery.flot/jquery.flot.js"></script>
<script src="~/template/lib/jquery.flot/jquery.flot.stack.js"></script>
<script src="~/template/lib/jquery.flot/jquery.flot.resize.js"></script>
<script src="~/template/lib/chart.js/Chart.bundle.min.js"></script>
<script src="~/template/lib/jqvmap/jquery.vmap.min.js"></script>

<script src="~/template/lib/cleave.js/cleave.min.js"></script>
<script src="~/template/lib/cleave.js/addons/cleave-phone.us.js"></script>
<script src="~/template/assets/js/dashforge.js"></script>




<script>
    var GlobalSendForm = async function (isview, isOnlyAction, idForm, IdAddResult, callbackSucsess, callbackErr) {
        var dtForm = document.getElementById(idForm);
        var dtFormRe = document.getElementById(IdAddResult);

        if (dtForm != null && dtForm != undefined) {
            let config = {
                headers: {
                    'content-type': dtForm.enctype
                }
            }
            let params = new FormData(dtForm);
            if (dtForm.method == "post") {
                await axios.post(dtForm.action, params, config).then(response => {
                    if (isOnlyAction == false) {
                        if (isview) {
                            dtFormRe.innerHTML = response.data
                        } else {
                            ShowMessageErrorShort("success", response.data)
                        }
                    }


                    if (callbackSucsess != null && callbackSucsess != undefined) {
                        callbackSucsess()
                    }
                }).catch(error => {
                    GlobalValidAxios(error)
                    if (callbackErr != null && callbackErr != undefined) {
                        callbackErr()
                    }
                }).finally()
            } else {

            }


        } else {
            dtFormRe.innerHTML = "Error, formularo no encontrado"
        }
    }
    var GlobalValidAxios = function (error) {
        if (error.response) {
            if (error.response.status === 400) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true,
                    onOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: "error",
                    title: error.response.data
                })
            }
            else if (error.response.status === 404) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true,
                    onOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: "warning",
                    title: error.response.data
                })
            }
            else if (error.response.status === 500) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true,
                    onOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: "error",
                    title: "Error de sistema, contacta a TI"
                })
            }
        }
        console.error(error)
    }
    function ShowMessageErrorShort(text, icon) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 4000,
            timerProgressBar: true,
            onOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: icon,
            title: text
        })
    }
    var CalcularIMC = function() {
        var Altura = document.getElementById("Altura")
        var Peso = document.getElementById("Peso")
        var IMC = document.getElementById("IMC")
        console.log("calculando IMC")
        if (Altura != null && Peso != null && IMC != null ) {
            if (Altura.value != "" && Peso.value != "") {
                var IMC_ = parseFloat(Peso.value) / (parseFloat(Altura.value) * parseFloat(Altura.value))
                IMC.value = IMC_ + ""
            }
        }

    }
    var ValidateFormIncPerm = function () {
        console.log("validando inc perm form")
        let tipoAsunto = document.getElementById("IdAsunto");
        let tipoPago = document.getElementById("PermisoPago");
        if (tipoAsunto != undefined && tipoPago != undefined) {
            if (tipoAsunto.value === 36 || tipoAsunto.value === "36") {
                tipoPago.style.display = ""
                console.log("none")
            } else {
                tipoPago.style.display = "none"
            }
        }


        
    }
    var getRenderViewCon = async function (element) {

        if (element.dataset["rendercontent"] == undefined) {
            getRenderViewCon(element.parentElement)
        } else {
            //console.log(element)
            return element
        }
    }
    var ValidViewActionAccess = async function (element, mensaje) {
        Swal.fire({
            title: 'Estas seguro de: " ' + mensaje +'"?',
            text: "!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Si adelante!'
        }).then(async(result) => {
            if (result.isConfirmed) {
                //data - renderContent="Empleado"
                console.log(element)
                let rendermode = element.dataset["rendercontent"]
                if (rendermode == undefined || rendermode == "") {
                    let ContetExis = false;
                    //var contenedor = await getRenderViewCon(element)

                    var contenedor = element.parentElement
                    while (contenedor.dataset["rendercontent"] == undefined) {
                        contenedor = contenedor.parentElement
                    }
                    if (contenedor != null) {
                        var ruta = element.dataset["rute"];
                        if (ruta != "" && ruta != undefined) {
                            contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                            await axios.get(ruta, null, null).then(response => {
                                contenedor.innerHTML = response.data

                                var mode = element.dataset["mode"];
                                if (mode != undefined && mode == "form") {
                                    ExcecForm(contenedor)
                                } else {
                                    $('.commontable').DataTable({
                                        //responsive:true,
                                        language: {
                                            searchPlaceholder: 'Search...',
                                            sSearch: '',
                                            lengthMenu: '_MENU_ items/page',
                                        },
                                        ordering: false
                                    });
                                }

                            }).catch(error => {
                                GlobalValidAxios(error);
                            }).finally(() => {

                            })
                        }
                    }
                }
            }
        })

    }
    var GetViewAccess = async function (element) {
        //data - renderContent="Empleado"
        console.log(element)
        let rendermode = element.dataset["rendercontent"]
        if (rendermode == undefined || rendermode == "") {
            let ContetExis = false;
            //var contenedor = await getRenderViewCon(element)

            var contenedor = element.parentElement
            while (contenedor.dataset["rendercontent"] == undefined) {
                contenedor = contenedor.parentElement
            }
            if (contenedor != null) {
                var ruta = element.dataset["rute"];
                if (ruta != "" && ruta != undefined) {
                    contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                    await axios.get(ruta, null, null).then(response => {
                        contenedor.innerHTML = response.data

                        var mode = element.dataset["mode"];
                        if (mode != undefined && mode == "form") {
                            ExcecForm(contenedor)
                            ValidateFormIncPerm();
                        }

                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {

                    })
                }
            }
        } else {
            $("#ModalFormViewMedium").modal({
                backdrop: "static", //remove ability to close modal with click
                keyboard: false, //remove option to close with keyboard
                show: true //Display loader!
            });
            let contenedor = document.getElementById("ModalFormViewMedium_contente")
            if (contenedor != null) {
                var ruta = element.dataset["rute"];
                if (ruta != "" && ruta != undefined) {
                    contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                    await axios.get(ruta, null, null).then(response => {
                        contenedor.innerHTML = response.data

                        var mode = element.dataset["mode"];
                        if (mode != undefined && mode == "form") {
                            ExcecForm(contenedor)
                        }

                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {

                    })
                }
            }
        }
    }
    var ExcecForm = async function (contenedor) {
        console.log(contenedor)
        var forms = document.getElementsByClassName("ExcecForm");
        for (var i = 0; i < forms.length; i++) {
            forms[i].onsubmit = async (e) => {
                e.preventDefault();
                var contenedor = e.srcElement.parentElement
                while (contenedor.dataset["rendercontent"] == undefined) {
                    contenedor = contenedor.parentElement
                }
                if (contenedor != null) {
                    $("#ModalFormProcessing").modal({
                        backdrop: "static", //remove ability to close modal with click
                        keyboard: false, //remove option to close with keyboard
                        show: true //Display loader!
                    });
                    let data = new FormData(e.srcElement);
                    let enctype = e.srcElement.enctype
                    let method = e.srcElement.method
                    let action = e.srcElement.action
                    await axios({
                        method: method,
                        url: action,
                        data: data,
                        headers: { 'Content-Type': enctype }
                    }).then(response2 => {
                        contenedor.innerHTML = response2.data
                    }).catch(error2 => {
                        $("#ModalFormProcessing").modal("hide");
                        GlobalValidAxios(error2);
                    }).finally(() => {
                        ExcecForm(contenedor)
                        $("#ModalFormProcessing").modal("hide");
                    })
                    $("#ModalFormProcessing").modal("hide");
                }

            }
        }
    }
    $(document).ready(function () {
        //$('.select2').select2({
        //    placeholder: 'Choose one',
        //    searchInputPlaceholder: 'Search options',
        //    dropdownParent: $('#puestosselect')
        //});
        //$('.select2').select2({
        //    minimumResultsForSearch: 1,
        //    dropdownParent: $parent,
        //    placeholder: "Select a country",
        //    width: '100%'
        //});
    });

</script>

