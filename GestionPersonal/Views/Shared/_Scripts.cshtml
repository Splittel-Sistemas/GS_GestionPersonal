@{
    var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
    var controllerAction = this.ViewContext.RouteData.Values["action"].ToString();
}
<script src="~/template/lib/jquery/jquery.min.js"></script>
<script src="https://unpkg.com/@@popperjs/core@2"></script>
<script src="~/template/lib/jqueryui/jquery-ui.min.js"></script>
<script src="~/template/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/template/lib/feather-icons/feather.min.js"></script>
<script src="~/template/lib/perfect-scrollbar/perfect-scrollbar.min.js"></script>
    <script src="~/template/lib/datatables.net/js/jquery.dataTables.min.js"></script>
@if (controllerName != "FormacionCapacitacion")
{
    <script src="~/template/lib/datatables.net-dt/js/dataTables.dataTables.min.js"></script>
    <script src="~/template/lib/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/template/lib/datatables.net-responsive-dt/js/responsive.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.0/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.7.0/js/buttons.print.min.js"></script>

}


<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.1/axios.js"></script>
<script src="https://unpkg.com/vue-router@2.0.0/dist/vue-router.js"></script>
<script src="https://unpkg.com/element-ui/lib/index.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="~/template/lib/select2/js/select2.min.js"></script>


<script src="~/template/lib/cleave.js/cleave.min.js"></script>
<script src="~/template/lib/cleave.js/addons/cleave-phone.us.js"></script>
<script src="~/template/assets/js/dashforge.js"></script>
<script src="https://momentjs.com/downloads/moment.js"></script>




<script>
    var GlobalSendForm = async function (isview, isOnlyAction, idForm, IdAddResult, callbackSucsess, callbackErr) {
        var dtForm = document.getElementById(idForm);
        var dtFormRe = document.getElementById(IdAddResult);

        if (dtForm != null && dtForm != undefined) {
            let config = {
                headers: {
                    'content-type': dtForm.enctype
                }
            }
            let params = new FormData(dtForm);
            if (dtForm.method == "post") {

                await axios.post(dtForm.action, params, config).then(response => {
                    if (isOnlyAction == false) {
                        if (isview) {
                            dtFormRe.innerHTML = response.data
                        } else {
                            ShowMessageErrorShort("success", response.data)
                        }
                    }

                    if (callbackSucsess != null && callbackSucsess != undefined) {
                        callbackSucsess()
                    }
                }).catch(error => {
                    GlobalValidAxios(error)
                    if (callbackErr != null && callbackErr != undefined) {
                        callbackErr()
                    }
                }).finally(() => {
                })
            } else {

            }


        } else {
            dtFormRe.innerHTML = "Error, formularo no encontrado"
        }
    }
    var GlobalValidAxios = function (error) {
        if (error.response) {
            if (error.response.status === 400) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true,
                    onOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: "error",
                    title: error.response.data
                })
            }
            else if (error.response.status === 404) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true,
                    onOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: "warning",
                    title: error.response.data
                })
            }
            else if (error.response.status === 500) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true,
                    onOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({
                    icon: "error",
                    title: "Error de sistema, contacta a TI"
                })
            }
        }
        console.error(error)
    }
    function ShowMessageErrorShort(text, icon) {
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 4000,
            timerProgressBar: true,
            onOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: icon,
            title: text
        })
    }
    var CalcularIMC = function() {
        var Altura = document.getElementById("Altura")
        var Peso = document.getElementById("Peso")
        var IMC = document.getElementById("IMC")
        if (Altura != null && Peso != null && IMC != null ) {
            if (Altura.value != "" && Peso.value != "") {
                var IMC_ = parseFloat(Peso.value) / (parseFloat(Altura.value) * parseFloat(Altura.value))
                IMC.value = IMC_ + ""
            }
        }

    }
    var ValidateFormIncPerm = function () {
        let tipoAsunto = document.getElementById("IdAsunto");
        let tipoPago = document.getElementById("PermisoPago");
        if (tipoAsunto != undefined && tipoPago != undefined) {
            if (tipoAsunto.value === 36 || tipoAsunto.value === "36") {
                tipoPago.style.display = ""
            } else {
                tipoPago.style.display = "none"
            }
        }



    }
    var ValidPgoForm = async function () {
                    let tipoAsunto = document.getElementById("IdAsunto");
                    if (tipoAsunto.value === 36 || tipoAsunto.value === "36") {
                        let opcionesPago = document.getElementById("IdPagoPermiso").options
                        await axios.get('@Url.Action("ValidOpcionesPersonal", "IncPermiso")/?Fecha=' + document.getElementById("app_permiso_create_fecha").value, null, null).then(response => {
                            for (var i = 0; i < opcionesPago.length; i++) {
                                opcionesPago[i].style.display = 'none'
                            }
                            document.querySelector("#IdPagoPermiso option[value='0']").style.display = ''
                            for (var k in response.data) {
                                document.querySelector("#IdPagoPermiso option[value='" + response.data[k].idCatalogoOpcionesValores + "']").style.display = ''
                            }
                        }).catch(error => {
                            GlobalValidAxios(error);
                        }).finally(() => {

                        })
                    }
                }
    var getRenderViewCon = async function (element) {

        if (element.dataset["rendercontent"] == undefined) {
            getRenderViewCon(element.parentElement)
        } else {
            //console.log(element)
            return element
        }
    }

    var GL_session_confirm = async function (mensaje , callbackConfirm) {
        gl_validSess(async () => {
            Swal.fire({
                title: mensaje,
                text: "",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si adelante!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    if (callbackConfirm != null && callbackConfirm != undefined) {
                        callbackConfirm();
                    }
                }
            })
        });
    }

    var gl_viewConent = async function (element) {
        gl_validSess(async () => {
            if (element.dataset["btn_render"] != undefined) {
                //if (element.dataset["render_content"] != undefined) {
                //    if (element.dataset["render_rute"] != undefined) {
                //        var contenedor = document.getElementById(element.dataset["render_content"])
                //        if (contenedor != undefined) {
                //            contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                //            await axios.get(element.dataset["render_rute"], null, null).then(response => {
                //                contenedor.innerHTML = response.data;
                //            }).catch(error => {
                //                GlobalValidAxios(error);
                //                contenedor.innerHTML = "<span class='tx-danger'>Error, por favor intenta nuevamente</span>"
                //            }).finally(() => {

                //            })
                //        }
                //    }
                //}
                gl_view_content(element.dataset["render_rute"], element.dataset["render_content"])
            }
        });
    }

    var gl_view_content = async function (rute, content) {
        gl_validSess(async () => {
            if (content != undefined) {
                if (rute != undefined) {
                    var contenedor = document.getElementById(content)
                    if (contenedor != undefined) {
                        contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                        await axios.get(rute, null, null).then(response => {
                            contenedor.innerHTML = response.data;
                        }).catch(error => {
                            GlobalValidAxios(error);
                            contenedor.innerHTML = "<span class='tx-danger'>Error, por favor intenta nuevamente</span>"
                        }).finally(() => {

                        })
                    }
                }
            }
        });
    }



    var ValidViewActionAccess = async function (element, mensaje) {
        gl_validSess(async () => {
            Swal.fire({
                title: 'Estas seguro de: " ' + mensaje + '"?',
                text: "",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si adelante!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    //data - renderContent="Empleado"
                    let rendermode = element.dataset["rendercontent"]
                    if (rendermode == undefined || rendermode == "") {
                        let ContetExis = false;
                        //var contenedor = await getRenderViewCon(element)

                        var contenedor = element.parentElement
                        while (contenedor.dataset["rendercontent"] == undefined) {
                            contenedor = contenedor.parentElement
                        }
                        if (contenedor != null) {
                            var ruta = element.dataset["rute"];
                            if (ruta != "" && ruta != undefined) {
                                contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                                await axios.get(ruta, null, null).then(response => {
                                    contenedor.innerHTML = response.data

                                    var mode = element.dataset["mode"];
                                    if (mode != undefined && mode == "form") {
                                        ExcecForm(contenedor)
                                    } else {
                                        $('.commontable').DataTable({
                                            //responsive:true,
                                            language: {
                                                searchPlaceholder: 'Search...',
                                                sSearch: '',
                                                lengthMenu: '_MENU_ items/page',
                                            },
                                            ordering: false
                                        });
                                    }

                                }).catch(error => {
                                    GlobalValidAxios(error);
                                }).finally(() => {

                                })
                            }
                        }
                    }
                }
            })
        });
    }

    var GetViewAccess = async function (element, ShowLoader = true) {
        gl_validSess(async () => {
            //data - renderContent="Empleado"
            let rendermode = element.dataset["rendermode"]
            if (rendermode == undefined || rendermode == "") {
                let ContetExis = false;
                //var contenedor = await getRenderViewCon(element)
                var contenedor = element.parentElement
                while (contenedor.dataset["rendercontent"] == undefined) {
                    contenedor = contenedor.parentElement
                }
                if (contenedor != null) {
                    var ruta = element.dataset["rute"];
                    if (ruta != "" && ruta != undefined) {
                        if (ShowLoader) {
                            contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                        } else {
                            contenedor.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="sr-only" > Loading...</span></div>'
                        }
                        await axios.get(ruta, null, null).then(response => {
                            contenedor.innerHTML = response.data
                            contenedor.dataset["ruterender"] = ruta
                            var mode = element.dataset["mode"];
                            if (mode != undefined && mode == "form") {
                                ExcecForm(contenedor)
                                ValidateFormIncPerm();
                            }
                        }).catch(error => {
                            GlobalValidAxios(error);
                        }).finally(() => {

                        })
                    }
                }
            } else {
                $("#ModalFormViewMedium").modal({
                    backdrop: "static", //remove ability to close modal with click
                    keyboard: false, //remove option to close with keyboard
                    show: true //Display loader!
                });
                let contenedor = document.getElementById("ModalFormViewMedium_contente")
                if (contenedor != null) {
                    var ruta = element.dataset["rute"];
                    if (ruta != "" && ruta != undefined) {
                        contenedor.innerHTML = '<div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div><div class="placeholder-paragraph">  <div class="line"></div>  <div class="line"></div></div>'
                        await axios.get(ruta, null, null).then(response => {
                            contenedor.innerHTML = response.data

                            var mode = element.dataset["mode"];
                            if (mode != undefined && mode == "form") {
                                ExcecForm(contenedor)
                            }
                        }).catch(error => {
                            GlobalValidAxios(error);
                        }).finally(() => {

                        })
                    }
                }
            }
        });
    }
    var Gl_form = async function (e) {
        e.preventDefault();
        gl_validSess(async () => {
            let data = new FormData(e.srcElement);
            let enctype = e.srcElement.enctype
            let method = e.srcElement.method
            let action = e.srcElement.action
            await axios({
                method: method,
                url: action,
                data: data,
                headers: { 'Content-Type': enctype }
            }).then(response => {
                $("#modal_det_vacaciones").modal("hide");
                document.getElementById("btn_refres_vacaciondet").click()
            }).catch(error => {
                GlobalValidAxios(error);
            }).finally(() => {

            })
        });
        return false
    }
    var Gl_form1 = async function (e) {
        e.preventDefault();
        gl_validSess(async () => {
            let data = new FormData(e.srcElement);
            let enctype = e.srcElement.enctype
            let method = e.srcElement.method
            let action = e.srcElement.action
            await axios({
                method: method,
                url: action,
                data: data,
                headers: { 'Content-Type': enctype }
            }).then(response => {
                window.location.reload()
            }).catch(error => {
                GlobalValidAxios(error);
            }).finally(() => {

            })
        });
        return false
    }
    var closeModal = function (model) {
        $(model).modal("hide");
    }
    var ExcecForm = async function (contenedor) {

        //gl_validSess(async () => {
            console.log('Validando form')
            var forms = document.getElementsByClassName("ExcecForm");
            for (var i = 0; i < forms.length; i++) {
                forms[i].onsubmit = async (e) => {
                    e.preventDefault();
                    gl_validSess(async () => {
                        var contenedor = e.srcElement.parentElement
                        while (contenedor.dataset["rendercontent"] == undefined) {
                            contenedor = contenedor.parentElement
                        }
                        if (contenedor != null) {
                            $("#ModalFormProcessing").modal({
                                backdrop: "static", //remove ability to close modal with click
                                keyboard: false, //remove option to close with keyboard
                                show: true //Display loader!
                            });
                            let data = new FormData(e.srcElement);
                            let enctype = e.srcElement.enctype
                            let method = e.srcElement.method
                            let action = e.srcElement.action
                            await axios({
                                method: method,
                                url: action,
                                data: data,
                                headers: { 'Content-Type': enctype }
                            }).then(response2 => {
                                contenedor.innerHTML = response2.data
                                $("#ModalFormProcessing").modal("hide");
                            }).catch(error2 => {
                                $("#ModalFormProcessing").modal("hide");
                                GlobalValidAxios(error2);
                            }).finally(() => {
                                ExcecForm(contenedor)
                                $("#ModalFormProcessing").modal("hide");
                            })
                            $("#ModalFormProcessing").modal("hide");
                        }
                    });
                }
            }
        //});
    }
    var gl_callback = null;
    var gl_validSessionFomr = async function (element) {
        element.disabled = true
        element.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Validando..';
        await axios.post('@Url.Action("Login", "Login")', {
            UserName: document.getElementById("gl_UserName").value,
            Pass: document.getElementById("gl_Pass").value
        }, null).then(response => {
            ShowMessageErrorShort("Sessión iniciada", "success")
            if (gl_callback != null && gl_callback != undefined) {
                $("#modalFormSartSession").modal('hide')
                element.innerHTML = 'Iniciar'
                element.disabled = false
                gl_callback();
            }
        }).catch(error => {
            GlobalValidAxios(error);
        }).finally(() => {
            //this.Registrando = false
            element.innerHTML = 'Iniciar'
            element.disabled = false
        })
    }
    var gl_openModal = function (modalId, activarDrop = false) {
        $("#" + modalId).modal({
            backdrop: "static", //remove ability to close modal with click
            keyboard: false, //remove option to close with keyboard
            show: true //Display loader!
        });
        if (activarDrop === true)
            $('.modal-backdrop').remove();
    }
    var gl_validSess = async function (callback) {
        await axios.get('@Url.Action("CheckSession", "Home")', null, null).then(response => {
            callback();
        }).catch(error => {
            if (error.response) {
                if (error.response.status === 401) {
                    /*alert(error.response.data)*/
                    $("#modalFormSartSession").modal({
                        backdrop: 'static',
                        show: true,
                        keyboard: false
                    })
                    gl_callback = callback;
                }
                else {
                    GlobalValidAxios(error);
                }
            }
        }).finally(() => {
            //this.Registrando = false
            //console.log("finally")
        })
    }
    var btn_loading = function (idelement, title, type = 'show') {
        var element = document.getElementById(idelement)
        if (element !== undefined) {
            if (type === 'show') {
                element.disabled = true;
                element.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" id="loading_' + idelement + '"></span> Procesando...'
            } else {
                element.disabled = false;
                element.innerHTML =  title
            }
        }
    }
    var ShowCanvasToggle = function (ref) {
        console.log("Hola soy el perro del chuy")
        $(ref).addClass('show');
    }
    var canvas_menu_toogle = function() {
        // The code below is for demo purposes only.
        // For you to not be confused, please refer to
        // Off-Canvas starter template in Collections

        $('.off-canvas-menu').on('click', function (e) {
            e.preventDefault();
            var target = $(this).attr('href');
            $(target).addClass('show');
        });


        $('.off-canvas .close').on('click', function (e) {
            e.preventDefault();
            $(this).closest('.off-canvas').removeClass('show');
        })

        $(document).on('click touchstart', function (e) {
            e.stopPropagation();

            // closing of sidebar menu when clicking outside of it
            if (!$(e.target).closest('.off-canvas-menu').length) {
                var offCanvas = $(e.target).closest('.off-canvas').length;
                if (!offCanvas) {
                    $('.off-canvas.show').removeClass('show');
                }
            }
        });
    }
    $(document).ready(function () {
        //$('.select2').select2({
        //    placeholder: 'Choose one',
        //    searchInputPlaceholder: 'Search options',
        //    dropdownParent: $('#puestosselect')
        //});
        //$('.select2').select2({
        //    minimumResultsForSearch: 1,
        //    dropdownParent: $parent,
        //    placeholder: "Select a country",
        //    width: '100%'
        //});
        var btn_start_showNot = document.getElementById("start_showNot")
        if (btn_start_showNot != undefined && btn_start_showNot != null) {
            btn_start_showNot.click()
        }
        setInterval(function () {
            var btn_start_showNot = document.getElementById("start_showNot")
            if (btn_start_showNot != undefined && btn_start_showNot != null) {
                btn_start_showNot.click()
            }
        }, 300000);

    });

</script>

