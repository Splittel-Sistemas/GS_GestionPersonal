#pragma checksum "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fb737e1d0982a6deb38d45582c44314d6d812394"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_FormacionCapacitacion_Template), @"mvc.1.0.view", @"/Views/FormacionCapacitacion/Template.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\_ViewImports.cshtml"
using GestionPersonal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\_ViewImports.cshtml"
using GestionPersonal.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fb737e1d0982a6deb38d45582c44314d6d812394", @"/Views/FormacionCapacitacion/Template.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"44f628e23a2086c1f04f862587f80afdb82e0a32", @"/Views/_ViewImports.cshtml")]
    public class Views_FormacionCapacitacion_Template : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
  
    ViewData["Title"] = "Capacitación";


#line default
#line hidden
#nullable disable
            DefineSection("MenuTop", async() => {
                WriteLiteral(@"
    <div class=""d-sm-flex align-items-center justify-content-between mg-b-20 mg-lg-b-25 mg-xl-b-30"">
        <div>
            <nav aria-label=""breadcrumb"">
                <ol class=""breadcrumb breadcrumb-style1 mg-b-10"">
                    <li class=""breadcrumb-item active"" aria-current=""page"">");
#nullable restore
#line 10 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                                                      Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
                WriteLiteral("</li>\r\n                </ol>\r\n            </nav>\r\n            <h4 class=\"mg-b-0 tx-spacing--1\">");
#nullable restore
#line 13 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                        Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
                WriteLiteral("</h4>\r\n        </div>\r\n    </div>\r\n");
            }
            );
            DefineSection("Style", async() => {
                WriteLiteral(@" 
    <link href=""https://craftpip.github.io/jquery-confirm/css/jquery-confirm.css"" rel=""stylesheet"" />
    <style>

        .list-group-item.active {
            z-index: 2;
            color: #fff;
            background-color: #0168fa14 !important;
            border-color: #0168fa;
        }
    </style>
");
            }
            );
            WriteLiteral("<div");
            BeginWriteAttribute("class", " class=\"", 884, "\"", 892, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""app_template_show"">
    <div class=""row""></div>
    <div class=""row"">
        <div class=""col-3"">
            <div class=""card ht-100p"">
                <div class=""card-header d-flex align-items-center justify-content-between"">
                    <h6 class=""mg-b-0"">Detalle</h6>
                    <div class=""d-flex align-items-center tx-18"">
                        <a href=""#"" class=""link-03 lh-0"" data-btn_render data-render_content=""sec_deta_templ"" data-render_rute=""");
#nullable restore
#line 37 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                                                                                                           Write(Url.Action("CapTemplDetails","FormacionCapacitacion", new { id=ViewBag.IdCapTempl }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""" onclick=""gl_viewConent(this)"" id=""sec_deta_templ_btn""><i class=""icon ion-md-refresh""></i></a>
                    </div>
                </div>
                <div class=""card-body"" id=""sec_deta_templ"">

                </div>
            </div><!-- card -->
        </div>
        <div class=""col-6"">
            <div class=""profile-update-option bg-white ht-50 bd d-flex justify-content-end mg-b-20 mg-lg-b-25 rounded"">
                <div class=""d-flex align-items-center pd-x-20 mg-r-auto"">
                    <i data-feather=""edit-3""></i> <a href=""#"" class=""link-03 mg-l-10"" v-on:click=""addSession()""><span class=""d-none d-sm-inline"">Nueva sesión</span></a>
                </div>
                <div class=""wd-50 bd-l d-flex align-items-center justify-content-center"">
                    <a href=""#"" class=""link-03"" data-toggle=""tooltip"" title=""Postear una evaluación"" v-on:click=""beforeSelectEva()""><i data-feather=""file-text""></i></a>
                </div>
            </div>
            <di");
            WriteLiteral(@"v class=""card mg-b-20 mg-lg-b-25"" v-if=""shedule.length == 0 "">
                <div class=""content-auth-alt mt-5 col-12 mb-5"">
                    <div class="" ht-100p tx-center mt-1"">
                        <div class=""ht-100p d-flex flex-column align-items-center justify-content-center"">
                            <div class=""wd-70p wd-sm-250 wd-lg-300 mg-b-15""><img src=""https://img.icons8.com/fluency/50/000000/info.png"" class=""img-fluid""");
            BeginWriteAttribute("alt", " alt=\"", 2940, "\"", 2946, 0);
            EndWriteAttribute();
            WriteLiteral(@"></div>
                            <h5 class=""tx-color-01 tx-10 tx-sm-32 tx-lg-15 mg-xl-b-5"">No hay contenido aun para este curso o capacitación</h5>
                        </div>
                    </div><!-- container -->
                </div><!-- content -->
            </div>
            <h6 v-if=""shedule.length > 0 "" class=""tx-color-01 tx-10 tx-sm-32 tx-lg-15 mg-xl-b-5"">Estructura de la capacitación</h6>
            <hr v-if=""shedule.length > 0 "" />
            <render-card v-for=""(shedule, shedule_index) in shedule"" v-bind:id=""shedule.idCapTemplShedule"" v-bind:rute=""shedule.rute"" v-bind:shedule=""shedule"" v-on:update_shema=""update_shema""></render-card>
        </div>
        <div class=""col-3""></div>
    </div>
    <div class=""modal fade"" id=""eva_mdl_design"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel3"" aria-hidden=""true"">
        <div class=""modal-dialog modal-dialog-centered modal-xl"" role=""document"">
            <div class=""modal-content tx-14"">
                <d");
            WriteLiteral(@"iv class=""modal-header"">
                    <h6 class=""modal-title"" id=""exampleModalLabel3"">evaluaciones</h6>
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                        <span aria-hidden=""true"">&times;</span>
                    </button>
                </div>
                <div class=""modal-body"">
                    <evaluacion-create></evaluacion-create>
                </div>
            </div>
        </div>
       
    </div>
</div>


");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
#nullable restore
#line 90 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"    <script src=""https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js""></script>
    <script src=""https://craftpip.github.io/jquery-confirm/js/jquery-confirm.js""></script>
    <script>
        function DarkUI_exception(message, id_reference = '') {
            this.message = message;
            this.id_reference = id_reference
            this.name = 'DarkUI_exception';
        }
        var gl_call_ = function () {
            console.log(""gl_call_"")
        }
        Vue.component('render-card', {
            props: ['rute', 'id','shedule'],
            template: `
                <div class=""card mb-3"" v-if=""shedule.eliminada === false"" v-bind:id=""'card_shedule_id_' + id"" >
                    <div class=""card-body"">
                        <div class=""d-flex"">
                            <div class=""mr-auto p-1""></div>
                            <div class=""p-1"">
                                <a  v-bind:href=""'#card_shedule_id_' + id"" class=""link-03 lh-0 shedule_ren");
                WriteLiteral(@"der""
                                    data-btn_render
                                    v-bind:id=""'btn_shedule_id_' + id""
                                    v-bind:data-render_content=""'shedule_id_' + id""
                                    v-bind:data-render_rute=""rute""
                                    onclick=""gl_viewConent(this)"" style=""display:none"">
                                    <i class=""icon ion-md-refresh""></i>
                                </a>
                                <a v-on:click=""getShema()"" title=""Recargar informacion""><i class=""icon ion-md-refresh""></i></a>
                                <a v-on:click=""delete_sess()"" title=""Eliminar"" class=""text-danger pl-2""><i class=""icon ion-md-trash""></i></a>
                            </div>
                        </div>
                        <div class=""col-12"" v-bind:id=""'shedule_id_' + id""></div>
                    </div>
                </div>
                <div v-else-if=""shedule.eliminada === true"">
   ");
                WriteLiteral(@"                 <div class=""alert  alert-warning r"" role=""alert"">
                        <p>
                            Ha sido eliminada la session <span class=""font-weight-bold"">{{ shedule.title }}</span>
                                <a  v-bind:href=""'#card_shedule_id_' + id"" class=""link-03 lh-0 shedule_render""
                                    data-btn_render
                                    v-bind:id=""'btn_shedule_id_' + id""
                                    v-bind:data-render_content=""'shedule_id_' + id""
                                    v-bind:data-render_rute=""rute""
                                    onclick=""gl_viewConent(this)"" style=""display:none"">
                                    <i class=""icon ion-md-refresh""></i>
                                </a>
                            <a v-on:click=""getShema(true); "" title=""Recargar informacion""><i class=""icon ion-md-eye""></i></a>
                        </p>
                        <hr v-if=""showDelete == true"">
        ");
                WriteLiteral(@"                <div class=""col-12 "" v-bind:id=""'shedule_id_' + id"" v-if=""showDelete == true""></div>
                    </div>
                </div>
            `,
            data: function (){
                return {
                    data: this.shedule,
                    shedule_active: null,
                    showDelete: false
                }
            },
            mounted() {
                this.getShema()
            },
            watch: {

            },
            methods: {
                delete_sess: function () {
                    $.confirm({
                        title: 'Sesión',
                        content: '¿Deseas eliminar esta sesión?',
                        buttons: {
                            confirm: this.delete_act,
                            cancel: function () {
                            }
                        }
                    });

                },
                delete_act: async function () {
                  ");
                WriteLiteral("  let rute = \'../CapSessDelete?IdCapTempl=");
#nullable restore
#line 171 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                                       Write(ViewBag.IdCapTempl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"&IdCapTemplShedule=' + this.id
                    await axios.get(rute, null, null).then(response => {
                        this.getShema();
                        $.alert('Confirmed!');
                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {

                    })
                },
                getShema: async function (forceShow = false) {
                    if (this.shedule.eliminada === true && forceShow)
                        this.showDelete = !this.showDelete
                    await axios.get('../GetSheduleid?IdCapTempl=");
#nullable restore
#line 184 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                                           Write(ViewBag.IdCapTempl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"&IdCapTemplShedule=' + this.id, null, null).then(response => {
                        this.$emit('update_shema', response.data)
                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {
                        //if (this.shedule.eliminada === false)
                            document.getElementById(""btn_shedule_id_"" + this.id).click()
                        //document.getElementById(""shedule_id_"" + this.id).innerHTML = ''
                    })
                }
            }
        })
        Vue.component('evaluacion-create', {
            props: ['rute', 'id','shedule'],
            template: `
                <div class="""">

                    <div v-if=""mode === 'Edit.Create.Evaluacion'"">
                        <div class=""row p-2"" v-if="""">
                            <div class="" w-100"">
                                <div class=""d-flex"">
                                    <div class="""">
                ");
                WriteLiteral(@"                        <div class=""btn-group"" role=""group"" aria-label=""Basic example"">
                                            <button type=""button"" class=""btn btn-outline-secondary"" v-on:click="" mode = 'List.Evaluacion'""><img src=""https://img.icons8.com/ios-glyphs/30/000000/circled-left.png"" style=""width: 15px;"" /></button>
                                        </div>
                                    </div>
                                    <div class=""ml-auto"">
                                        <div class=""btn-group"" role=""group"" aria-label=""Basic example"">
                                            <button type=""button"" class=""btn btn-outline-secondary"" :disabled=""capEva_obj.capEvaPrg_list.length === 0 && capEva_obj.nombre === ''"" v-on:click=""mode = 'Preview.Evaluacion'"">
                                                <img src=""https://img.icons8.com/ios-filled/50/000000/preview-pane.png"" style=""width: 15px;"" />
                                            </button>
            ");
                WriteLiteral(@"                                <button type=""button"" class=""btn btn-outline-secondary"" :disabled=""capEva_obj.capEvaPrg_list.length === 0 && capEva_obj.nombre === ''"" v-on:click=""saveEvaluacion()"">
                                                <img src=""https://img.icons8.com/ios-filled/50/000000/save--v1.png"" style=""width: 15px;"" />
                                            </button>
                                            <button type=""button"" class=""btn btn-outline-secondary"" :disabled=""capEva_obj.capEvaPrg_list.length === 0 && capEva_obj.nombre === ''"">
                                                <img src=""https://img.icons8.com/ios-glyphs/30/000000/trash--v1.png"" style=""width: 15px;"" />
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h5 class=""mt-2"">Detalle</h");
                WriteLiteral(@"5>
                        <div class=""row mb-3"">
                            <div class=""col-12"" >
                               <div class=""form-group row"" style=""margin-bottom: 1px !important"">
                                    <label for=""inputEmail3"" class=""col-sm-2 col-form-label"">Nombre</label>
                                    <div class=""col-sm-10"">
                                        <input type=""text"" class=""form-control form-control-sm"" id=""capEva_obj_nombre"" v-model=""capEva_obj.nombre"" placeholder=""Nombre"">
                                    </div>
                                </div>
                                <div class=""form-group row"" style=""margin-bottom: 1px !important"">
                                    <label for=""inputPassword3"" class=""col-sm-2 col-form-label"">Descripcion</label>
                                    <div class=""col-sm-10"">
                                        <input type=""text"" class=""form-control form-control-sm"" id=""capEva_obj_descripci");
                WriteLiteral(@"on"" v-model=""capEva_obj.descripcion"" placeholder=""Descripcion"">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h5 class="""">Preguntas</h5>
                        <div class=""row p-2"">
                            <div class=""col-4 p-2"">
                                <button type=""button"" class=""btn btn-sm btn-primary btn-block"" title=""Agregar nueva pregunta"" v-on:click=""beforeAddPreg()"">Agregar nueva</button>
                                <ul class=""list-group wd-md-50p w-100"">
                                    <li v-if=""capEva_obj.capEvaPrg_list.length > 0"" v-for=""(preg, preg_index) in capEva_obj.capEvaPrg_list"" style="""" v-bind:class=""'list-group-item d-flex align-items-center ' + (preg_index === capEvaPrg.selectedIndex ? 'active' : '')"">
                                      <div>
                                        <h6 class=""tx-13 tx-inverse tx-semibold mg-b-0""");
                WriteLiteral(@" style=""margin-top: 30px;/*! margin-bottom: 30px; */"" v-on:click=""setSelectec(preg_index)"">
                                            {{ preg.pregunta }} <i class=""typcn typcn-pencil tx-danger""></i>
                                        </h6>
                                        <span class=""d-block tx-11 text-muted"">{{ preg.comentarios }}</span>
                                        <span class=""d-block tx-11 text-muted"">Puntaje: {{ preg.puntaje }}</span>

                                      </div>
                                        <div v-if=""preg.tipo == 'T'"" class=""marker marker-ribbon marker-primary pos-absolute t-10 l-0"">Abierta</div>
                                        <div v-if=""preg.tipo == 'O'"" class=""marker marker-ribbon marker-success pos-absolute t-10 l-0"">Opcional</div>
                                        <div v-if=""preg.tipo == 'M'"" class=""marker marker-ribbon marker-warning pos-absolute t-10 l-0"">Multiple</div>
                                    </li>
      ");
                WriteLiteral(@"                          </ul>
                                <button type=""button"" class=""btn btn-sm btn-primary btn-block"" title=""guardar información"" v-on:click=""saveLocalStoragge()"">saveLocalStoragge</button>
                            </div>
                            <div class=""col-8 p-2"" style=""border-left: 1px solid #d2d4d7;"" v-if=""capEvaPrg.mode === 'Agregar' || capEvaPrg.mode === 'Editar'"">
                                <nav class=""navbar navbar-light bg-light"">
                                  <span class=""navbar-text"">
                                   {{ capEvaPrg.title }}
                                  </span>
                                </nav>
                                <div class=""form-group row mt-2"" style=""margin-bottom: 1px !important"">
                                    <label for=""capEvaPrg_pregunta"" class=""col-sm-2 col-form-label"">Pregunta </label>
                                    <div class=""col-sm-10"">
                                        <textar");
                WriteLiteral(@"ea class=""form-control form-control-sm"" id=""capEvaPrg_pregunta"" v-model=""capEvaPrg.data.pregunta"" placeholder=""Pregunta"" rows=""1""></textarea>
                                    </div>
                                </div>
                                <div class=""form-group row"" style=""margin-bottom: 1px !important"">
                                    <label for=""capEvaPrg_comentarios"" class=""col-sm-2 col-form-label"">Comentarios</label>
                                    <div class=""col-sm-10"">
                                        <input type=""text"" class=""form-control form-control-sm"" id=""capEvaPrg_comentarios"" v-model=""capEvaPrg.data.comentarios"" placeholder=""Comentarios"">
                                    </div>
                                </div>
                                <div class=""form-group row"" style=""margin-bottom: 1px !important"">
                                    <label for=""capEvaPrg_puntaje"" class=""col-sm-2 col-form-label"">Puntaje</label>
                        ");
                WriteLiteral(@"            <div class=""col-sm-10"">
                                        <input type=""number"" class=""form-control form-control-sm"" id=""capEvaPrg_puntaje"" v-model=""capEvaPrg.data.puntaje"" placeholder=""Puntaje"">
                                    </div>
                                </div>
                                <div class=""form-group row"" style=""margin-bottom: 1px !important"">
                                    <label for=""capEvaPrg_tipo"" class=""col-sm-2 col-form-label"">Tipo de pregunta</label>
                                    <div class=""col-sm-10"">
                                        <select v-model=""capEvaPrg.data.tipo"" class=""form-control form-control-sm"" id=""capEvaPrg_tipo"">
                                            <option v-for=""option in capEvaPrg.listTipo"" v-bind:value=""option.value"">
                                                {{ option.text }}
                                            </option>
                                        </select>
             ");
                WriteLiteral(@"                       </div>
                                </div>
                                <div class=""form-group row"" style=""margin-bottom: 1px !important;margin-right: 1px;margin-left: 1px;"" v-if=""capEvaPrg.data.tipo === 'O' || capEvaPrg.data.tipo === 'M'"" >
                                    <table class=""table table-sm "">
                                        <thead>
                                            <tr>
                                                <th colspan=""3"" class=""tx-center tx-uppercase bg-light"">Respuestas</th>
                                            </tr>
                                            <tr>
                                                <th class="" "">Respuesta</th>
                                                <th class="" "" style=""width: 100px;"">Es correcta</th>
                                                <th class="" "" style=""width: 100px;""></th>
                                            </tr>
                                      ");
                WriteLiteral(@"      <tr>
                                                <th>
                                                    <textarea class=""form-control form-control-sm"" id=""capEvaPrgRes_respuesta"" v-model=""capEvaPrgRes.respuesta"" placeholder=""Descripcion"" rows=""1""></textarea>
                                                </th>
                                                <th colspan=""2"" class=""text-center"" style=""vertical-align: middle;"">
                                                    <button class=""btn btn-sm btn-primary"" title=""Agregar respuesta"" v-on:click=""addRespuesta()"">Agregar +</button>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr v-for=""(resp, resp_index) in capEvaPrg.data.respuestas"">
                                                <td>
                                               ");
                WriteLiteral(@"     <textarea  class=""form-control form-control-sm"" v-bind:id=""'resp_respuesta_' + resp_index"" v-model=""resp.respuesta"" placeholder=""Descripcion"" rows=""1""></textarea>
                                                </td>
                                                <td  class=""text-center"" style=""vertical-align: middle;"">
                                                    <input type=""checkbox"" class="""" v-bind:id=""'resp_esCorrecta_' + resp_index"" v-model=""resp.esCorrecta"" placeholder=""Descripcion"">
                                                </td>
                                                <td></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class=""form-group row mg-b-0 mt-4"">
                                    <div class=""col-sm-12 text-right"">
                                        <button type=""button"" cl");
                WriteLiteral(@"ass=""btn btn-sm btn-secondary"" v-on:click=""resetPreg()"">Cancelar</button>
                                        <button type=""button"" class=""btn btn-sm btn-danger"" title=""Eliminar pregunta"" v-if=""capEvaPrg.data.pregunta !== '' && capEvaPrg.data.tipo !== '' && capEvaPrg.mode === 'Editar'"" v-on:click=""deletePreg()"">Eliminar</button>
                                        <button type=""button"" class=""btn btn-sm btn-primary"" title=""Guardar pregunta"" v-if=""capEvaPrg.data.pregunta !== '' && capEvaPrg.data.tipo !== '' && capEvaPrg.mode === 'Agregar'"" v-on:click=""addPregunta()"">Agregar</button>
                                        <button type=""button"" class=""btn btn-sm btn-primary"" title=""Actualizar pregunta"" v-if=""capEvaPrg.data.pregunta !== '' && capEvaPrg.data.tipo !== '' && capEvaPrg.mode === 'Editar'"" v-on:click=""updatePregunta()"">Actualizar</button>
                                    </div>
                                </div>
                            </div>
                            <div ");
                WriteLiteral(@"class=""col-8 p-2"" style=""border-left: 1px solid #d2d4d7;"" v-if=""capEvaPrg.mode === ''"">
                                <div class=""content content-fixed content-auth-alt mt-5"">
                                    <div class=""container ht-100p tx-center mt-5"">
                                        <div class=""ht-100p d-flex flex-column align-items-center justify-content-center"">
                                            <h3 class=""tx-color-01 tx-24 tx-sm-32 tx-lg-36 mg-xl-b-5"">Gestión de personal</h3>
                                            <div class=""wd-70p wd-sm-250 wd-lg-300 mg-b-15""><img src=""https://image.freepik.com/vector-gratis/feliz-campana-planificacion-seo-redes-sociales-ilustracion-plana-aislada_74855-10793.jpg"" class=""img-fluid"" alt=""""></div>
                                            <div class=""mg-b-40"">
                                                <a href=""#"" class=""btn btn-white bd-2 pd-x-30"" v-on:click=""beforeAddPreg()"">Agregar pregunta</a>
                              ");
                WriteLiteral(@"              </div>
                                        </div>
                                    </div><!-- container -->
                                </div><!-- content -->
                            </div>
                        </div>
                    </div><!-- content -->
                    <div v-if=""mode === 'List.Evaluacion'"">
                        <table class=""table table-sm"">
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Estatus</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for=""(eva_, eva_index) in capEva_obj_list"">
                                    <th>{{ eva_.nombre }}</th>
                                    <th><a href=""#"" class=""btn btn-white bd-2 pd-x-30"" v-on:click=""capEvalistSelect(eva_index)"">ver</a></th>
                      ");
                WriteLiteral(@"          </tr>
                            </tbody>
                        </table>

                        <a href=""#"" class=""btn btn-white bd-2 pd-x-30"" v-on:click=""beforeAddEva()"">Agregar evaluacion</a>
                    </div><!-- content -->
                    <div v-if=""mode === 'Preview.Evaluacion'"">
                        <div class=""row p-2"" v-if="""">
                            <div class="" w-100"">
                                <div class=""d-flex"">
                                    <div class="""">
                                        <div class=""btn-group"" role=""group"" aria-label=""Basic example"">
                                            <button type=""button"" class=""btn btn-outline-secondary"" v-on:click=""mode = 'List.Evaluacion'""><img src=""https://img.icons8.com/ios-glyphs/30/000000/circled-left.png"" style=""width: 15px;"" /></button>
                                        </div>
                                    </div>
                                    <div class=""ml");
                WriteLiteral(@"-auto"">
                                        <div class=""btn-group"" role=""group"" aria-label=""Basic example"">
                                            <button type=""button"" class=""btn btn-outline-secondary"" v-on:click=""mode = 'Edit.Create.Evaluacion'"">
                                                <img src=""https://img.icons8.com/ios-filled/50/000000/preview-pane.png"" style=""width: 15px;"" />
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <dl class=""row"" style=""font-size: 13px;"">
                            <dt class=""col-12"">
                                Folio:
                            </dt>
                            <dd class=""col-12"">
                            </dd>
                            <dt class=""col-12"">
                                Nombre");
                WriteLiteral(@"
                            </dt>
                            <dd class=""col-12"">
                                {{ capEva_obj.nombre }}
                            </dd>
                            <dt class=""col-12"">
                                Descripción
                            </dt>
                            <dd class=""col-12"">
                                {{ capEva_obj.descripcion }}
                            </dd>
                        </dl>
                        <h5>Preguntas</h5>
                        <div v-if=""capEva_obj.capEvaPrg_list.length > 0"" v-for=""(preg, preg_index) in capEva_obj.capEvaPrg_list"">
                            <h6> {{ (preg_index + 1)  }} .- {{ preg.pregunta }}</h6>
                            <p>{{ preg.comentarios }}</p>
                            <p>Puntos: {{ preg.puntaje }}</p>
                            <ul>
                                <li v-for=""(resp, resp_index) in preg.respuestas"">
                                    <spa");
                WriteLiteral(@"n v-bind:class=""resp.esCorrecta ? 'tx-primary' : ''""> {{ resp.respuesta }}</span>
                                </li>
                            </ul>
                        </div>
                    </div><!-- content -->
                    <div></div><!-- content -->
                    <div class=""modal fade"" id=""modal_register_eva"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
                        <div class=""modal-dialog modal-dialog-centered wd-sm-400"" role=""document"">
                            <div class=""modal-content"">
                                <div class=""modal-body pd-20 pd-sm-40"">
                                    <a href="""" role=""button"" class=""close pos-absolute t-15 r-15"" data-dismiss=""modal"" aria-label=""Close"">
                                        <span aria-hidden=""true"">&times;</span>
                                    </a>
                                    <div>
                                        <h4>Create New Account</h4>
                    ");
                WriteLiteral(@"                    <p class=""tx-color-03"">Crear nueva evaluación</p>
                                        <div class=""form-group"">
                                            <label>Nombre</label>
                                            <input type=""text"" class=""form-control"" placeholder=""Nombre"" id=""eva_name_bew_modal"">
                                        </div>
                                        <button class=""btn btn-primary btn-block"" v-on:click=""addEva()"">Crear</button>
                                    </div>
                                </div><!-- modal-body -->
                            </div><!-- modal-content -->
                        </div><!-- modal-dialog -->
                    </div><!-- modal -->
                </div>

            `,
            data: function (){
                return {
                    capEva_obj_list: [],
                    mode: 'List.Evaluacion',
                    selectedIndex: null,
                    capEva_obj: {
");
                WriteLiteral(@"                        idCapEva: 0,
                        nombre: '',
                        descripcion: '',
                        hrsDurac: 0,
                        aplTime: false,
                        capEvaPrg_list: []
                    },
                    capEvaPrg: {
                        title: '',
                        mode: '',
                        selectedIndex: null,
                        data: {
                            idCapEvaPr: 0,
                            pregunta: '',
                            comentarios: '',
                            tipo: '',
                            puntaje: 0,
                            respuestas: []
                        },
                        listTipo: [
                            { value: 'T', text: 'Abierta - el usuario puede introducir texto' },
                            { value: 'O', text: 'Opcional - el usuario puede seleccionar una opción correcta' },
                            { value: 'M', ");
                WriteLiteral(@"text: 'Multiples opciones - el usuario puede seleccionar multiples opciones correctas' }
                        ]
                    },
                    capEvaPrgRes: {
                        respuesta: '',
                        esCorrecta: '',

                    },
                    error_DarkUI_exception : null
                }
            },
            mounted() {
                //this.capEva_obj.capEvaPrg_list.push({
                //    idCapEvaPr: 0,
                //    pregunta: '¿Cuáles son los elementos fundamentales del hilo de fibra óptica?',
                //    comentarios: '',
                //    tipo: 'O',
                //    puntaje: 0,
                //    respuestas: [
                //        {
                //            respuesta: 'Cubierta exterior y cubierta interior ',
                //            esCorrecta: false,
                //        },{
                //            respuesta: 'Núcleo, revestimiento y recubrimiento',
        ");
                WriteLiteral(@"        //            esCorrecta: true,
                //        },{
                //            respuesta: 'Núcleo, buffer y Cubierta externa',
                //            esCorrecta: false,
                //        },{
                //            respuesta: 'Revestimiento y cladding',
                //            esCorrecta: false,
                //        },

                //    ]
                //});
                //this.capEva_obj.capEvaPrg_list.push({
                //    idCapEvaPr: 0,
                //    pregunta: '¿Cuál es la clasificación de fibra óptica?',
                //    comentarios: '',
                //    tipo: 'O',
                //    puntaje: 0,
                //    respuestas: [
                //        {
                //            respuesta: 'Monomodo y Multimodo',
                //            esCorrecta: true,
                //        }, {
                //            respuesta: 'Exterior e interior',
                //            e");
                WriteLiteral(@"sCorrecta: false,
                //        }, {
                //            respuesta: 'Exterior, interior e int-ext.',
                //            esCorrecta: false,
                //        }, {
                //            respuesta: 'Armados y sin armadura',
                //            esCorrecta: false,
                //        },

                //    ]
                //});
                this.capEvaList();
                const cat = localStorage.getItem('capEva_obj');
                if (cat != undefined) {
                    this.capEva_obj = JSON.parse(cat);
                }

                this.mode = 'List.Evaluacion'
            },
            watch: {

            },
            methods: {
                capEvalistSelect: function (index) {
                    this.capEva_obj = this.capEva_obj_list[index]
                    this.capEva_obj.capEvaPrg_list = []
                    this.mode = 'Edit.Create.Evaluacion'
                },
                ");
                WriteLiteral("capEvaList: async function () {\r\n                    await axios.get(\'");
#nullable restore
#line 551 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                Write(Url.Action("CapEvaList", "FormacionCapacitacion"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', null, null).then(response => {
                        this.mode = 'List.Evaluacion'
                        this.capEva_obj_list = response.data
                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {

                    })
                },
                addEva: async function () {
                    var nombre = document.getElementById(""eva_name_bew_modal"")
                    let formData = new FormData();
                    formData.append(""Nombre"", nombre.value)
                    formData.append(""Instruccionesa"", nombre.value)
                    await axios.post('");
#nullable restore
#line 565 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                 Write(Url.Action("CapEvaAdd", "FormacionCapacitacion"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', formData, null).then(response => {
                        $(""#modal_register_eva"").modal('hide')
                        this.capEva_obj = response.data;
                        this.capEva_obj.capEvaPrg_list = []
                        this.mode = 'Edit.Create.Evaluacion'
                        nombre.value = ''
                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {

                    })
                },
                beforeAddEva: function () {
                    $(""#modal_register_eva"").modal({
                        backdrop: ""static"", //remove ability to close modal with click
                        keyboard: false, //remove option to close with keyboard
                        show: true //Display loader!
                    });
                },
                saveEvaluacion: function () {
                    console.log(JSON.stringify(this.capEva_obj))
                },
                dele");
                WriteLiteral(@"tePreg: function () {
                    this.capEva_obj.capEvaPrg_list.splice(this.capEvaPrg.selectedIndex, 1)
                    this.capEvaPrg.data.pregunta = ''
                    this.capEvaPrg.data.tipo = ''
                    this.capEvaPrg.data.puntaje = 0
                    this.capEvaPrg.data.respuestas = []

                    this.capEvaPrg.selectedIndex = null
                    this.capEvaPrg.mode = ''
                    this.capEvaPrg.title = ''
                },
                resetPreg: function () {
                    this.capEvaPrg.data.pregunta = ''
                    this.capEvaPrg.data.tipo = ''
                    this.capEvaPrg.data.puntaje = 0
                    this.capEvaPrg.data.respuestas = []

                    this.capEvaPrg.selectedIndex = null
                    this.capEvaPrg.mode = ''
                    this.capEvaPrg.title = ''
                },
                beforeAddPreg: function () {
                    this.capEvaPrg.data.pregu");
                WriteLiteral(@"nta = ''
                    this.capEvaPrg.data.tipo = ''
                    this.capEvaPrg.data.puntaje = 0
                    this.capEvaPrg.data.respuestas = []

                    this.capEvaPrg.selectedIndex = null
                    this.capEvaPrg.mode = 'Agregar'
                    this.capEvaPrg.title = 'Agregar nueva pregunta'
                },
                updatePregunta: function () {
                    try {
                        this.error_DarkUI_exception = null

                        this.validatePreg();

                        this.capEva_obj.capEvaPrg_list[this.capEvaPrg.selectedIndex] = JSON.parse(JSON.stringify(this.capEvaPrg.data));

                        this.capEvaPrg.data.pregunta = ''
                        this.capEvaPrg.data.tipo = ''
                        this.capEvaPrg.data.puntaje = 0
                        this.capEvaPrg.data.respuestas = []

                        this.capEvaPrg.selectedIndex = null
                        this.capEv");
                WriteLiteral(@"aPrg.mode = 'Agregar'
                        this.capEvaPrg.title = 'Agregar nueva pregunta'
                    } catch (e) {
                        this.error_DarkUI_exception = e
                        $.alert({
                            title: 'Opps!',
                            content: e.message,
                            type: 'red'
                        });
                        console.error(e)
                    }
                },
                setSelectec: function (preg_index) {
                    this.capEvaPrg.data = JSON.parse(JSON.stringify(this.capEva_obj.capEvaPrg_list[preg_index]))
                    this.capEvaPrg.selectedIndex = preg_index
                    this.capEvaPrg.mode = 'Editar'
                    this.capEvaPrg.title = 'Editar Pregunta'
                },
                saveLocalStoragge: function() {
                    localStorage.setItem('capEva_obj', JSON.stringify(this.capEva_obj));
                },
                addPregunta:");
                WriteLiteral(@"async function () {
                    try {
                        this.error_DarkUI_exception = null
                        // validar informacion
                        this.validatePreg();
                        // validar si ya fue registrada la pregunta
                        if (this.capEva_obj.capEvaPrg_list.find(a => a.pregunta === this.capEvaPrg.data.pregunta) != undefined)
                            throw new DarkUI_exception('Ya fue registrada esta pregunta', '');

                        /*
                         * Ejecutar metodo web para registrar la pregunta
                         * */
                        let formData = new FormData();
                        formData.append(""IdCapEva"", this.capEva_obj.idCapEva)
                        formData.append(""Pregunta"", this.capEvaPrg.data.pregunta)
                        formData.append(""Comentarios"", this.capEvaPrg.data.comentarios)
                        formData.append(""Puntaje"", this.capEvaPrg.data.puntaje)
    ");
                WriteLiteral("                    formData.append(\"Tipo\", this.capEvaPrg.data.tipo)\r\n\r\n                        var inserted = null;\r\n                        await axios.post(\'");
#nullable restore
#line 673 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                     Write(Url.Action("CapEvaPrgAdd", "FormacionCapacitacion"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', formData, null).then(response => {
                            // agregar la pregunta a la lista
                            inserted = response.data
                            this.capEva_obj.capEvaPrg_list.push(response.data);
                        }).catch(error => {
                            GlobalValidAxios(error);
                        }).finally(() => {

                        })
                        // validar registro correcto de pregunta
                        if (inserted === null || inserted === undefined || inserted.idCapEvaPrg == 0)
                            throw new DarkUI_exception('Error al registrar la pregunta, intenta nuevamente', '');

                        this.capEvaPrg.data.respuestas.forEach(async (e, i) => {
                            let formDateRes = new FormData();
                            formDateRes.append(""IdCapEvaPrg"", e.idCapEvaPrg)
                            formDateRes.append(""Respuesta"", e.respuesta)
                            for");
                WriteLiteral("mDateRes.append(\"EsCorrecta\", e.esCorrecta)\r\n                            await axios.post(\'");
#nullable restore
#line 691 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                         Write(Url.Action("CapEvaPrgResAdd", "FormacionCapacitacion"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', formDateRes, null).then(response => {
                                // agregar la respuesta a la lista
                            }).catch(error => {
                                GlobalValidAxios(error);
                            }).finally(() => {

                            })
                        });

                        // limpiar form create pregunta
                        this.capEvaPrg.data.pregunta = ''
                        this.capEvaPrg.data.tipo = ''
                        this.capEvaPrg.data.puntaje = 0
                        this.capEvaPrg.data.respuestas = []
                        this.capEvaPrg.selectedIndex = null
                        this.capEvaPrg.mode = ''
                        this.capEvaPrg.title = ''

                    } catch (e) {
                        this.error_DarkUI_exception = e
                        $.alert({
                            title: 'Opps!',
                            content: e.message,
                    ");
                WriteLiteral(@"        type: 'red'
                        });
                        console.error(e)
                    }
                },
                validatePreg: function () {
                    if (this.capEvaPrg.data.pregunta === '') {
                        throw new DarkUI_exception('Introduce un texto valido para tu pregunta', '');
                    }
                    if (this.capEvaPrg.data.tipo === '') {
                        throw new DarkUI_exception('Selecciona un tipo de pregunta', '');
                    }



                    if (this.capEvaPrg.data.tipo === 'O') {
                        if (this.capEvaPrg.data.respuestas.length === 0) {
                            throw new DarkUI_exception('Define al menos una respuesta', '');
                        }

                        if (this.capEvaPrg.data.respuestas.filter(a => a.esCorrecta === true).length === 0) {
                            throw new DarkUI_exception('selecciona la respuesta correcta para poder con");
                WriteLiteral(@"tinuar', '');
                        }

                        if (this.capEvaPrg.data.respuestas.filter(a => a.esCorrecta === true).length > 1) {
                            throw new DarkUI_exception('Solo puedes tener una respuesta correcta, si deseas mas de una opción selecciona tipo de pregunta: <strong>Multiples opciones</strong>', '');
                        }
                    }

                    if (this.capEvaPrg.data.tipo === 'M') {
                        if (this.capEvaPrg.data.respuestas.length === 0) {
                            throw new DarkUI_exception('Define al menos una respuesta', '');
                        }
                        if (this.capEvaPrg.data.respuestas.filter(a => a.esCorrecta === true).length == 0) {
                            throw new DarkUI_exception('Selecciona las respuestas correctas para continuar', '');
                        }
                    }
                },
                addRespuesta: function () {
                    tr");
                WriteLiteral(@"y {
                        this.error_DarkUI_exception = null
                        //if (this.capEvaPrgRes.esCorrecta) {
                        //    throw new DarkUI_exception('Has tratado de registrar una opcion marcada como opción correcta, por favor declara el puntaje ', '');
                        //}
                        if (this.capEvaPrg.data.respuestas.find(a => a.respuesta == this.capEvaPrgRes.respuesta) != undefined) {
                            throw new DarkUI_exception('Ya has gregado una opción similar a <strong>' + this.capEvaPrgRes.respuesta +'</strong>', '');
                        }
                        this.capEvaPrg.data.respuestas.push(JSON.parse(JSON.stringify(this.capEvaPrgRes)))
                        this.capEvaPrgRes.respuesta = ''
                    } catch (e) {
                        this.error_DarkUI_exception = e
                        $.alert({
                            title: 'Opps!',
                            content: e.message,
         ");
                WriteLiteral(@"                   type: 'red'
                        });
                        console.error(e)
                    }
                }
            }
        })
        var gl_diagloForm = function (rute, method, formData,call201 = null) {
            var modall_ = document.querySelectorAll(""div.jconfirm-closeIcon"")[0]
            if (modall_ != undefined) modall_.click()
            $.dialog({
                title:'FormacionCapacitacion',
                columnClass: 'col-md-12',
                content: function () {
                    var self = this;
                    return $.ajax({
                        url: rute,
                        data: formData,
                        method: method
                    }).done(function (data, textStatus, jqXHR) {
                        if (jqXHR.status === 200)
                            self.setContentAppend(data);
                        else if (jqXHR.status === 201) {
                            if (call201 != null) call20");
                WriteLiteral(@"1(data)
                        }
                        else {
                            var modall_ = document.querySelectorAll(""div.jconfirm-closeIcon"")[0]
                            if (modall_ != undefined) modall_.click()
                        }

                    }).fail(function () {
                        console.log('<div>Fail!</div>');
                    }).always(function (jqXHR) {
                        console.log(jqXHR.status);
                    });
                },
                contentLoaded: function (data, status, xhr) {
                    console.log('<div>Content loaded!</div>');
                },
                onContentReady: function () {
                    //bind to events
                    this.$content.find('form').on('submit', function (e) {
                        gl_diagloForm(e.target.action, e.target.method, $(""#"" + e.target.id).serialize(), call201)
                        e.preventDefault();
                    });
                ");
                WriteLiteral(@"    this.$content.find('form').on('reset', function (e) {
                        var modall_ = document.querySelectorAll(""div.jconfirm-closeIcon"")[0]
                        if (modall_ != undefined) modall_.click()
                    });
                }
            });
        }
        var app_template_show = new Vue({
            el: ""#app_template_show"",
            data: {
                shedule: [],
                evaluaciones: []
            },
            async mounted() {
                document.getElementById(""sec_deta_templ_btn"").click()
                await this.getShedule();

                this.beforeSelectEva();
            },
            methods: {
                beforeSelectEva: function () {
                    $(""#eva_mdl_design"").modal({
                        backdrop: ""static"", //remove ability to close modal with click
                        keyboard: false, //remove option to close with keyboard
                        show: true //Display loader!
 ");
                WriteLiteral(@"                   }); 

                },
                update_shema: function (new_shema) {
                    let index_ = this.shedule.findIndex(a => a.idCapTemplShedule === new_shema.idCapTemplShedule)
                    if (index_ >= 0) {
                        this.shedule[index_].idCapTemplShedule = new_shema.idCapTemplShedule;
                        this.shedule[index_].idCapTempl = new_shema.idCapTempl;
                        this.shedule[index_].idRefer = new_shema.idRefer;
                        this.shedule[index_].tipo = new_shema.tipo;
                        this.shedule[index_].ordern = new_shema.ordern;
                        this.shedule[index_].eliminada = new_shema.eliminada;
                        this.shedule[index_].creada = new_shema.creada;
                        this.shedule[index_].editada = new_shema.editada;
                        this.shedule[index_].title = new_shema.title;
                        this.shedule[index_].rute = new_shema.rute;
        ");
                WriteLiteral("            }\r\n                },\r\n                addSession: function () {\r\n                    gl_diagloForm(\'");
#nullable restore
#line 857 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                              Write(Url.Action("CapSessCreate", "FormacionCapacitacion", new { IdCapTempl = ViewBag.IdCapTempl }));

#line default
#line hidden
#nullable disable
                WriteLiteral("\', \'get\', null, async function (data) {\r\n                        await axios.get(\'../GetSheduleid?IdCapTempl=");
#nullable restore
#line 858 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                                               Write(ViewBag.IdCapTempl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"&IdCapTemplShedule=' + data.idCapTemplShedule, null, null).then(response => {
                            app_template_show.shedule.push(response.data)
                            var modall_ = document.querySelectorAll(""div.jconfirm-closeIcon"")[0]
                            if (modall_ != undefined) modall_.click()
                        }).catch(error => {
                            GlobalValidAxios(error);
                        }).finally(() => {

                        })
                    })
                },
                getShedule: async function () {
                     await axios.get('");
#nullable restore
#line 870 "C:\Luis Martinez backup\Splittel\Repositorios\GS_GestionPersonal_\GestionPersonal\Views\FormacionCapacitacion\Template.cshtml"
                                 Write(Url.Action("GetShedule", "FormacionCapacitacion", new { id=ViewBag.IdCapTempl }));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', null, null).then(response => {
                         this.shedule = response.data;
                    }).catch(error => {
                        GlobalValidAxios(error);
                    }).finally(() => {

                    })
                }
            }
        });
    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
